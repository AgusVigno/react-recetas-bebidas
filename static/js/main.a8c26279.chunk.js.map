{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListadoRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriaProvider","props","useState","categorias","guardarCategorias","useEffect","a","axios","get","resultado","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","busqueda","buscarReceta","consultar","guardarConsulta","url","consultarAPI","Formulario","useContext","guardarBusqueda","obtenerReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idreceta","guardarIdReceta","informacion","guardarReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","i","push","mostrarIngredientes","ListadoRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8c26279.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => {\n    return ( \n        <header className=\"bg-alert\">\n            <h1>Busca Recetas de Bebidas</h1>\n        </header>\n     );\n}\n \nexport default Header;","import React, {createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\n//crear el context\nexport const CategoriasContext = createContext();\n\n//provider es donde se encuentran las funciones y el state\nconst CategoriaProvider = (props) => {\n\n    //crear el state Context\n    const [categorias, guardarCategorias] = useState([]);\n\n\n    //ralizar el llamado a la API\n    useEffect(() => {\n        const obtenerCategorias = async () => {\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list`;\n            const resultado = await axios.get(url);\n\n            guardarCategorias(resultado.data.drinks);\n        }\n        obtenerCategorias();\n    }, []);\n\n    return (\n        <CategoriasContext.Provider\n            value={{\n                categorias\n            }}\n        >\n            {props.children}\n        </CategoriasContext.Provider>\n    )\n\n}\n\nexport default CategoriaProvider;","import React, {createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\nexport const RecetasContext = createContext();\n\nconst RecetasProvider = (props) => {\n\n    const [recetas, guardarRecetas] = useState([]);\n    const [busqueda, buscarReceta] = useState({\n        nombre: '',\n        categoria: ''\n    });\n    const [consultar, guardarConsulta] = useState(false);\n    \n    const {categoria, nombre} = busqueda;\n\n    useEffect(() => {\n        if(consultar){\n            const consultarAPI = async () => {\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${categoria}&i=${nombre}`;\n                const recetas = await axios.get(url);\n    \n                guardarRecetas(recetas.data.drinks);\n            }\n            consultarAPI();\n        }\n        // eslint-disable-next-line\n    }, [busqueda]);\n\n    return (\n        <RecetasContext.Provider\n            value={{\n                recetas,\n                buscarReceta,\n                guardarConsulta\n            }}\n        >\n            {props.children}\n        </RecetasContext.Provider>\n    );\n}\n\nexport default RecetasProvider;","import React, {useContext, useState} from 'react';\nimport {CategoriasContext} from '../context/CategoriasContext';\nimport {RecetasContext} from '../context/RecetasContext';\n\nconst Formulario = () => {\n\n    const {categorias} = useContext(CategoriasContext);\n    const {buscarReceta, guardarConsulta} = useContext(RecetasContext);\n\n    const [busqueda, guardarBusqueda] = useState({\n        nombre: '',\n        categoria: ''\n    });\n\n    const obtenerReceta = (e) => {\n        guardarBusqueda({\n            ...busqueda,\n            [e.target.name] : e.target.value\n        });\n    }\n\n    const buscarBebida = (e) => {\n        e.preventDefault();\n\n        buscarReceta(busqueda);\n        guardarConsulta(true);\n    }\n\n    return ( \n        <form \n            className=\"col-12\"\n            onSubmit={buscarBebida}\n        >\n            <fieldset className=\"text-center\">\n                <legend>\n                    Busca Bebidas por Categoría o Ingrediente\n                </legend>\n\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <input\n                            name=\"nombre\"\n                            className=\"form-control\"\n                            type=\"text\"\n                            placeholder=\"Buscar por Ingrediente\"\n                            onChange={obtenerReceta}\n                        />\n                    </div>\n                    <div className=\"col-md-4\">\n                        <select\n                            className=\"form-control\"\n                            name=\"categoria\"\n                            onChange={obtenerReceta}\n                        >\n                            <option value=\"\">--Seleccione Categoría--</option>\n                            {categorias.map(categoria => (\n                                <option\n                                    key={categoria.strCategory}\n                                    value={categoria.strCategory}\n                                >{categoria.strCategory}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"col-md-4\">\n                         <input\n                            type=\"submit\"\n                            className=\"btn btn-primary btn-block\"\n                            value=\"Buscar Bebidas\"\n                         />\n                    </div>\n                </div>\n            </fieldset>\n        </form>\n    );\n}\n \nexport default Formulario;","import React, {createContext, useEffect, useState} from 'react';\nimport axios from 'axios';\n\n// crear el context\nexport const ModalContext = createContext();\n\nconst ModalProvider = (props) => {\n\n    // state del provider\n    const [ idreceta, guardarIdReceta ] = useState(null);\n    const [ informacion, guardarReceta] = useState({});\n\n    // una vez que tenemos una receta, llamar la api\n    useEffect( () => {\n        const obtenerReceta = async () => {\n            if(!idreceta) return;\n\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idreceta}`;\n\n            const resultado = await axios.get(url);\n\n            guardarReceta(resultado.data.drinks[0]);\n        }\n        obtenerReceta();\n    }, [idreceta]);\n\n    return ( \n        <ModalContext.Provider\n            value={{\n                informacion,\n                guardarIdReceta,\n                guardarReceta\n            }}\n        >\n            {props.children}\n        </ModalContext.Provider>\n     );\n}\n \nexport default ModalProvider;","import React, { useContext, useState } from 'react';\nimport { ModalContext } from '../context/ModalContext';\n\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction getModalStyle() {\n    const top = 50 ;\n    const left = 50;\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      position: 'absolute',\n      width: 450,\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nconst Receta = ({receta}) => {\n\n    // Configuración del modal de material-ui\n    const [ modalStyle ] = useState(getModalStyle);\n    const [open, setOpen] = useState(false);\n\n    const classes = useStyles();\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n\n    // extraer los valores del context\n    const { informacion, guardarIdReceta, guardarReceta } = useContext(ModalContext);\n\n    // Muestra y formatea los ingredientes\n    const mostrarIngredientes = informacion => {\n        let ingredientes = [];\n        for(let i = 1; i < 16; i++){\n            if( informacion[`strIngredient${i}`] ) {\n                ingredientes.push(\n                    <li> { informacion[`strIngredient${i}`] }  { informacion[`strMeasure${i}`] }</li>\n                )\n            }\n        }\n        return ingredientes;\n    }\n\n    return ( \n        <div className=\"col-md-4 mb-3\">\n            <div className=\"card\">\n                 <h2 className=\"card-header\">{receta.strDrink}</h2>\n\n                 <img className=\"card-img-top\" src={receta.strDrinkThumb} alt={`Imagen de ${receta.strDrink}`} />\n\n                 <div className=\"card-body\">\n                     <button\n                        type=\"button\"\n                        className=\"btn btn-block btn-primary\"\n                        onClick={() => {\n                            guardarIdReceta(receta.idDrink);\n                            handleOpen();\n                        }}\n                     >\n                         Ver Receta\n                     </button>\n\n\n                     <Modal\n                        open={open}\n                        onClose={() => {\n                            guardarIdReceta(null);\n                            guardarReceta({})\n                            handleClose();\n                        }}\n                     >\n                         <div style={modalStyle} className={classes.paper}>\n                            <h2>{informacion.strDrink}</h2>\n                            <h3 className=\"mt-4\">Instrucciones</h3>\n                            <p>\n                                {informacion.strInstructions}\n                            </p>\n\n                            <img \n                                className=\"img-fluid my-4\" \n                                src={informacion.strDrinkThumb} \n                                alt={informacion.strDrink}\n                            />\n\n                            <h3>Ingredientes y cantidades</h3>\n                            <ul>\n                                { mostrarIngredientes(informacion) }\n                            </ul>\n                         </div>\n                     </Modal>\n                 </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Receta;","import React, {useContext} from 'react';\nimport {RecetasContext} from '../context/RecetasContext';\nimport Receta from './Receta';\n\nconst ListadoRecetas = () => {\n\n    //extraer las recetas\n    const {recetas} = useContext(RecetasContext);\n\n    return ( \n        <div className=\"row mt-5\">\n            {recetas.map(receta => (\n                <Receta \n                    key={receta.idDrink}\n                    receta={receta}\n                />\n            ))}\n        </div>\n    );\n}\n \nexport default ListadoRecetas;\n","import React from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport ListadoRecetas from './components/ListadoRecetas';\nimport CategoriaProvider from './context/CategoriasContext';\nimport RecetasProvider from './context/RecetasContext';\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n\treturn (\n\t\t<CategoriaProvider>\n\t\t\t<RecetasProvider>\n\t\t\t\t<ModalProvider>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<div className=\"container mt-5\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<Formulario />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<ListadoRecetas />\n\t\t\t\t\t</div>\n\t\t\t\t</ModalProvider>\n\t\t\t</RecetasProvider>\n\t\t</CategoriaProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}